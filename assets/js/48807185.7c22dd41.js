"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[645],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),y=r,m=d["".concat(s,".").concat(y)]||d[y]||p[y]||a;return t?o.createElement(m,i(i({ref:n},u),{},{components:t})):o.createElement(m,i({ref:n},u))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},72286:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=t(87462),r=(t(67294),t(3905));const a={sidebar_position:4},i="Luau",l={unversionedId:"Luau",id:"Luau",title:"Luau",description:"In v1.2.0, I created some boilerplate Luau types. This is immediately accessible when creating macros in Studio (use the Create Macro macro to see this). If",source:"@site/docs/Luau.md",sourceDirName:".",slug:"/Luau",permalink:"/Socket/docs/Luau",draft:!1,editUrl:"https://github.com/JoelBrd/Socket/edit/main/docs/Luau.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Adding Your First Macro",permalink:"/Socket/docs/YourFirstMacro"},next:{title:"Examples",permalink:"/Socket/docs/Examples"}},s={},c=[],u={toc:c};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"luau"},"Luau"),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"v1.2.0"),", I created some boilerplate Luau types. This is immediately accessible when creating macros in Studio (use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Create Macro")," macro to see this). If\ndeveloping in an IDE (e.g., VSCode) you will want to copy + paste the following code, and require it in your macro scripts to get the luau intellisense. This isn't\nideal I realise, but this is plugin needs a fairly unconventional design to work as it does!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'export type Janitor = {\n    Add: (self: Janitor, object: any, methodName: boolean | string | nil, index: any?) -> any,\n}\n\nexport type InstanceUtil = {\n    IntroduceInstance: (self: InstanceUtil, instance: Instance, dontSetWaypoint: boolean?) -> nil,\n    ClearInstance: (self: InstanceUtil, instance: Instance, doDestroy: boolean) -> nil,\n}\n\nexport type Logger = {\n    MacroInfo: (self: Logger, macro: PopulatedMacroDefinition, ...any) -> nil,\n    MacroWarn: (self: Logger, macro: PopulatedMacroDefinition, ...any) -> nil,\n}\n\nexport type RaycastUtil = {\n    RaycastMouse: (self: RaycastUtil, distance: number, raycastParams: RaycastParams?, checkAllCollisionGroups: boolean?) -> RaycastResult,\n    Raycast: (\n        self: RaycastUtil,\n        origin: Vector3,\n        direction: Vector3,\n        distance: number,\n        raycastParams: RaycastParams?,\n        checkAllCollisionGroups: boolean?\n    ) -> RaycastResult,\n}\n\nexport type MacroState = {\n    FieldValues: { [string]: any }, -- Keys are FieldNames, Values are FieldValues\n    IsRunning: boolean?,\n    IsKeybindDisabled: boolean?,\n    _Server: MacroState?,\n    _Client: MacroState?,\n}\n\nexport type MacroFieldTypeName = "string" | "number" | "boolean" | "Color3" | "Vector3"\nexport type MacroField = {\n    Type: MacroFieldTypeName,\n    Name: string,\n    IsRequired: boolean?,\n    Validator: ((value: any) -> string)?,\n}\n\nexport type MacroDefinition = {\n    Name: string,\n    NameColor: Color3?,\n    Icon: string?,\n    IconColor: Color3?,\n    Group: string?,\n    GroupColor: Color3?,\n    GroupIcon: string?,\n    GroupIconColor: Color3?,\n    Description: string?,\n    LayoutOrder: number?,\n    EnableAutomaticUndo: boolean?,\n    IgnoreGameProcessedKeybinds: boolean?,\n    AutoRun: boolean?,\n    Keybind: { Enum.KeyCode }?, -- {}\n    Fields: { MacroField }?, -- {}\n    State: MacroState?,\n    Disabled: boolean?,\n    Function: (macro: PopulatedMacroDefinition, plugin: Plugin) -> any,\n    BindToClose: ((macro: PopulatedMacroDefinition, plugin: Plugin) -> any)?,\n    BindToOpen: ((macro: PopulatedMacroDefinition, plugin: Plugin) -> any)?,\n}\n\nexport type PopulatedMacroDefinition = MacroDefinition & {\n    Icon: string,\n    Group: string,\n    Description: string,\n    LayoutOrder: number,\n    EnableAutomaticUndo: boolean,\n    IgnoreGameProcessedKeybinds: boolean,\n    AutoRun: boolean,\n    IsLocalMacro: boolean,\n    Keybind: { Enum.KeyCode },\n    Fields: { MacroField },\n    FieldChanged: BindableEvent,\n    State: MacroState,\n    RunJanitor: Janitor,\n    Disabled: boolean,\n    GetFieldValue: (self: PopulatedMacroDefinition, fieldName: string) -> any,\n    ToggleIsRunning: (self: PopulatedMacroDefinition) -> (),\n    IsRunning: (self: PopulatedMacroDefinition) -> boolean,\n}\n\nreturn {}\n')))}p.isMDXComponent=!0}}]);